// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

public enum TikTokLoginStatus: Int {
  case success = 0
  case cancelled = 1
  case error = 2
}

/// Generated class from Pigeon that represents data sent in messages.
public struct TikTokLoginResult {
  var status: TikTokLoginStatus
  var authCode: String? = nil
  var state: String? = nil
  var codeVerifier: String? = nil
  var errorCode: String? = nil
  var errorMessage: String? = nil

  static func fromList(_ list: [Any?]) -> TikTokLoginResult? {
    let status = TikTokLoginStatus(rawValue: list[0] as! Int)!
    let authCode: String? = nilOrValue(list[1])
    let state: String? = nilOrValue(list[2])
    let codeVerifier: String? = nilOrValue(list[3])
    let errorCode: String? = nilOrValue(list[4])
    let errorMessage: String? = nilOrValue(list[5])

    return TikTokLoginResult(
      status: status,
      authCode: authCode,
      state: state,
      codeVerifier: codeVerifier,
      errorCode: errorCode,
      errorMessage: errorMessage
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
      authCode,
      state,
      codeVerifier,
      errorCode,
      errorMessage,
    ]
  }
}

private class TiktokSDKApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return TikTokLoginResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class TiktokSDKApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? TikTokLoginResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class TiktokSDKApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return TiktokSDKApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return TiktokSDKApiCodecWriter(data: data)
  }
}

class TiktokSDKApiCodec: FlutterStandardMessageCodec {
  static let shared = TiktokSDKApiCodec(readerWriter: TiktokSDKApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
public protocol TiktokSDKApi {
  func setup(clientKey: String, completion: @escaping (Result<Void, Error>) -> Void)
  func login(scopes: [String], redirectUri: String, browserAuthEnabled: Bool?, completion: @escaping (Result<TikTokLoginResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
public class TiktokSDKApiSetup {
  /// The codec used by TiktokSDKApi.
  static var codec: FlutterStandardMessageCodec { TiktokSDKApiCodec.shared }
  /// Sets up an instance of `TiktokSDKApi` to handle messages through the `binaryMessenger`.
  public static func setUp(binaryMessenger: FlutterBinaryMessenger, api: TiktokSDKApi?) {
    let setupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.tiktok_api_ios.TiktokSDKApi.setup", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setupChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientKeyArg = args[0] as! String
        api.setup(clientKey: clientKeyArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setupChannel.setMessageHandler(nil)
    }
    let loginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.tiktok_api_ios.TiktokSDKApi.login", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let scopesArg = args[0] as! [String]
        let redirectUriArg = args[1] as! String
        let browserAuthEnabledArg: Bool? = nilOrValue(args[2])
        api.login(scopes: scopesArg, redirectUri: redirectUriArg, browserAuthEnabled: browserAuthEnabledArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginChannel.setMessageHandler(nil)
    }
  }
}
